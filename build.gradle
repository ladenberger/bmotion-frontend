import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.Exec

def bmotionVersion = '0.3.1'
def appVersion = '0.3.1'
def targets = ["linux-ia32", "linux-x64", "darwin-x64", "win32-ia32", "win32-x64"]

// ----------------------------------------
// Helper methods ...
// ----------------------------------------
def download(String address, String target) {
    def file = new FileOutputStream(target)
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

apply plugin: 'java'
apply plugin: 'maven'

repositories {
    mavenCentral()
    maven {
        name "sonatype snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "sonatype releases"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: 'de.hhu.stups', name: 'bmotion-prob', version: bmotionVersion, changing: true
}

task getLibs(dependsOn: jar) << {
    copy {
        from configurations.compile
        into 'build/libs'
    }
}

task npmDeps(type: Exec) {
    commandLine "npm", 'install'
}

task copyPackageJson(type: Copy) {
    from 'package.json'
    into 'build'
}

task npmProductionDeps(dependsOn: [copyPackageJson], type: Exec) {
    commandLine "npm", 'install', '--production', '--prefix', 'build'
}

task grunt_clean(dependsOn: [npmDeps], type: GruntTask) {
    gruntArgs = "clean --force"
}

task prepare(dependsOn: [npmDeps], type: GruntTask) {
    gruntArgs = "prepare --force"
}

task setupDev(dependsOn: [npmDeps], type: GruntTask) {
    gruntArgs = "setupdev"
}

task startDev(dependsOn: [npmDeps], type: GruntTask) {
    commandLine "npm", 'start'
}

task startServer(dependsOn: [getLibs], type: JavaExec) {
 main = 'de.bmotion.prob.Standalone'
 classpath file("${rootDir}/build/libs/*")
}

targets.each() { target ->

    task "copyResources_${target}"(dependsOn: ["grunt_standalone_${target}", getLibs, "npmProductionDeps"], type: Copy) {
        from 'bmotion.json'
        from('build') {
            include 'node_modules/**'
            include 'libs/**'
            include 'template/**'
        }
        if (target == "darwin-x64") {
            into 'build/client/BMotionWeb-' + target + '/BMotionWeb.app/Contents/Resources'
        } else {
            into 'build/client/BMotionWeb-' + target + '/resources'
        }
    }

    task "zip_${target}"(dependsOn: ["copyResources_${target}"], type: Zip) {
        destinationDir = new File('build/dist/' + appVersion)
        archiveName = 'BMotionWeb-' + appVersion + '-' + target + '.zip'
        from('build/client/BMotionWeb-' + target) {
            into "./BMotionWeb-" + appVersion
        }
    }

    task "grunt_standalone_${target}"(dependsOn: [npmDeps], type: GruntTask) {
        gruntArgs = "standalone_${target} --force"
    }

    task "standalone_${target}"(dependsOn: ["zip_${target}"]) {}

}

task standalone_all(dependsOn: [tasks.withType(Copy).matching { task -> task.name.startsWith('assemble_') },
                                tasks.withType(Zip).matching { task -> task.name.startsWith('zip_') }]) << {
}

// Extend clean task ...
clean {
  dependsOn getTasksByName("grunt_clean", true)
}

class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
    private String switches = "--no-color"

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$switches $gruntArgs".trim().split(" ") as List
    }
}
